// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String?
  passwordHash String
  createdAt    DateTime @default(now())
  roles		   UserRole[]
}

model Role {
	id			String	@id @default(cuid())
	name		String  @unique
	users		UserRole[]
}

model UserRole {
	userId		String
	roleId		String
	User		User @relation(fields: [userId], references: [id])
	role		Role @relation(fields: [roleId], references: [id])

	@@id([userId, roleId])
}

model File {
	id			String	@id @default(cuid())
	filename	String
	url			String
	uploadedBy	String
	createdAt	DateTime @default(now())
}

model AnalyticsEvent {
	id			String	@id @default(cuid())
	userId		String
	action		String
	metadata	Json?
	createdAt	DateTime @default(now())
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  start       DateTime
  end         DateTime
  createdBy   String
  createdAt   DateTime @default(now())
}

model Notification {
  id         String   @id @default(cuid())
  userId     String
  type       String   // e.g. "file_upload", "event_created"
  message    String
  isRead     Boolean  @default(false)
  metadata   Json?
  createdAt  DateTime @default(now())

  @@index([userId, isRead])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String   /// who performed the action
  action    String   /// e.g. "bulk_import", "user_created", "role_updated"
  metadata  Json?    /// any extra data (e.g. count of users imported)
  createdAt DateTime @default(now())

  @@index([userId, createdAt])
}

model NewsletterList {
  id            String         @id @default(cuid())
  name          String         @unique
  description   String?
  createdAt     DateTime       @default(now())
  subscriptions Subscription[] // back-relation to Subscription
}

model Subscriber {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String?
  phone         String?
  createdAt     DateTime       @default(now())
  subscriptions Subscription[] // back-relation to Subscription
  tags          SubscriberTag[] 
}

model Subscription {
  id               String              @id @default(cuid())
  subscriberId     String
  listId           String
  status           SubscriptionStatus  @default(PENDING)
  confirmToken     String?			   @unique
  subscribedAt     DateTime?
  confirmedAt      DateTime?
  unsubscribedAt   DateTime?

  subscriber Subscriber     @relation(fields: [subscriberId], references: [id])
  list       NewsletterList @relation(fields: [listId],     references: [id])

  @@unique([subscriberId, listId])
}

model Tag {
  id             String            @id @default(cuid())
  name           String            @unique
  subscriberTags SubscriberTag[]
}

model SubscriberTag {
  subscriberId String
  tagId        String

  subscriber Subscriber @relation(fields: [subscriberId], references: [id])
  tag        Tag        @relation(fields: [tagId],        references: [id])

  @@id([subscriberId, tagId])
}

enum SubscriptionStatus {
  PENDING
  ACTIVE
  UNSUBSCRIBED
}

model NewsletterTemplate {
	id		String	@id @default(cuid())
	name	String
	subject	String
	mjml	String
	createdAt	DateTime	@default(now())
}

